@model AuctionPortal.Models.Order
@{
    ViewBag.Title = "Płatność";
}

<h2>Wybierz opcję płatności</h2>

<form id="payment-form">
    <input type="hidden" id="payment-method" name="payment-method" value="" />
    <input type="hidden" id="discount-percentage" name="discount-percentage" value="@ViewData["DiscountPercentage"]" />
    <div id="paypal-button-container"></div>
</form>

@section Scripts {
    <script src="https://www.paypal.com/sdk/js?client-id=AVeV6n5vx3KnFjNQGvrX7Xlt57gZ21IErJSYLCR5MolZw7W223vV0pIXz9fDGS8nvRRlLvoqqYzMMYnl"></script>
    <script>
        var orderId = @Model.OrderID;
        var items = @Html.Raw(Json.Serialize(Model.OrderItems.Select(oi => new { title = oi.Auction.Title, price = oi.Auction.Price, quantity = oi.Quantity })));

        paypal.Buttons({
            createOrder: function (data, actions) {
                var discountPercentage = parseFloat(document.getElementById('discount-percentage').value);
                var totalPrice = 0;
                var itemTotalPrice = 0;

                for (var i = 0; i < items.length; i++) {
                    itemTotalPrice += items[i].price * items[i].quantity;
                }

                var discountAmount = itemTotalPrice * (discountPercentage / 100); // Dodaj tę linijkę
                totalPrice = itemTotalPrice - discountAmount; // Dodaj tę linijkę

                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            currency_code: "USD",
                            value: totalPrice.toFixed(2),
                            breakdown: {
                                item_total: {
                                    currency_code: "USD",
                                    value: itemTotalPrice.toFixed(2)
                                },
                                discount: { // Dodaj tę sekcję
                                    currency_code: "USD",
                                    value: discountAmount.toFixed(2)
                                }
                            }
                        },
                        items: items.map(function (item) {
                            return {
                                name: item.title,
                                unit_amount: {
                                    currency_code: "USD",
                                    value: item.price.toFixed(2)
                                },
                                quantity: item.quantity
                            };
                        })
                    }]
                });
            },
            onApprove: function (data, actions) {
                return actions.order.capture().then(function (details) {
                    document.getElementById('payment-method').value = 'paypal';

                    var paymentMethod = document.getElementById('payment-method').value;
                    window.location.href = '/Order/PaymentSuccess?id=' + orderId + '&paymentMethod=' + paymentMethod;
                }).catch(function (error) {
                    console.error('Capture error:', error);
                    window.location.href = '/Order/PaymentFailed?id=' + orderId;
                });
            },
            onError: function (err) {
                console.error('Payment error:', err);
                window.location.href = '/Order/PaymentFailed?id=' + orderId;
            },
            onCancel: function (data) {
                console.log('Payment cancelled.');
                window.location.href = '/Order/PaymentFailed?id=' + orderId;
            }
        }).render('#paypal-button-container');
    </script>
}
